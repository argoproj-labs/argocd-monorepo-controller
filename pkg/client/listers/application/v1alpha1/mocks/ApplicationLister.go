// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	v1alpha10 "github.com/argoproj/argo-cd/v3/pkg/apis/application/v1alpha1"
	"github.com/argoproj/argo-cd/v3/pkg/client/listers/application/v1alpha1"
	mock "github.com/stretchr/testify/mock"
	"k8s.io/apimachinery/pkg/labels"
)

// NewApplicationLister creates a new instance of ApplicationLister. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewApplicationLister(t interface {
	mock.TestingT
	Cleanup(func())
}) *ApplicationLister {
	mock := &ApplicationLister{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// ApplicationLister is an autogenerated mock type for the ApplicationLister type
type ApplicationLister struct {
	mock.Mock
}

type ApplicationLister_Expecter struct {
	mock *mock.Mock
}

func (_m *ApplicationLister) EXPECT() *ApplicationLister_Expecter {
	return &ApplicationLister_Expecter{mock: &_m.Mock}
}

// Applications provides a mock function for the type ApplicationLister
func (_mock *ApplicationLister) Applications(namespace string) v1alpha1.ApplicationNamespaceLister {
	ret := _mock.Called(namespace)

	if len(ret) == 0 {
		panic("no return value specified for Applications")
	}

	var r0 v1alpha1.ApplicationNamespaceLister
	if returnFunc, ok := ret.Get(0).(func(string) v1alpha1.ApplicationNamespaceLister); ok {
		r0 = returnFunc(namespace)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(v1alpha1.ApplicationNamespaceLister)
		}
	}
	return r0
}

// ApplicationLister_Applications_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Applications'
type ApplicationLister_Applications_Call struct {
	*mock.Call
}

// Applications is a helper method to define mock.On call
//   - namespace string
func (_e *ApplicationLister_Expecter) Applications(namespace interface{}) *ApplicationLister_Applications_Call {
	return &ApplicationLister_Applications_Call{Call: _e.mock.On("Applications", namespace)}
}

func (_c *ApplicationLister_Applications_Call) Run(run func(namespace string)) *ApplicationLister_Applications_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *ApplicationLister_Applications_Call) Return(applicationNamespaceLister v1alpha1.ApplicationNamespaceLister) *ApplicationLister_Applications_Call {
	_c.Call.Return(applicationNamespaceLister)
	return _c
}

func (_c *ApplicationLister_Applications_Call) RunAndReturn(run func(namespace string) v1alpha1.ApplicationNamespaceLister) *ApplicationLister_Applications_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function for the type ApplicationLister
func (_mock *ApplicationLister) List(selector labels.Selector) ([]*v1alpha10.Application, error) {
	ret1 := _mock.Called(selector)

	if len(ret1) == 0 {
		panic("no return value specified for List")
	}

	var r0 []*v1alpha10.Application
	var r1 error
	if returnFunc, ok := ret1.Get(0).(func(labels.Selector) ([]*v1alpha10.Application, error)); ok {
		return returnFunc(selector)
	}
	if returnFunc, ok := ret1.Get(0).(func(labels.Selector) []*v1alpha10.Application); ok {
		r0 = returnFunc(selector)
	} else {
		if ret1.Get(0) != nil {
			r0 = ret1.Get(0).([]*v1alpha10.Application)
		}
	}
	if returnFunc, ok := ret1.Get(1).(func(labels.Selector) error); ok {
		r1 = returnFunc(selector)
	} else {
		r1 = ret1.Error(1)
	}
	return r0, r1
}

// ApplicationLister_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type ApplicationLister_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - selector labels.Selector
func (_e *ApplicationLister_Expecter) List(selector interface{}) *ApplicationLister_List_Call {
	return &ApplicationLister_List_Call{Call: _e.mock.On("List", selector)}
}

func (_c *ApplicationLister_List_Call) Run(run func(selector labels.Selector)) *ApplicationLister_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 labels.Selector
		if args[0] != nil {
			arg0 = args[0].(labels.Selector)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *ApplicationLister_List_Call) Return(ret []*v1alpha10.Application, err error) *ApplicationLister_List_Call {
	_c.Call.Return(ret, err)
	return _c
}

func (_c *ApplicationLister_List_Call) RunAndReturn(run func(selector labels.Selector) ([]*v1alpha10.Application, error)) *ApplicationLister_List_Call {
	_c.Call.Return(run)
	return _c
}
