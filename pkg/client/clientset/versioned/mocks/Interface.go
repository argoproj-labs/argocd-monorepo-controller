// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"github.com/argoproj/argo-cd/v3/pkg/client/clientset/versioned/typed/application/v1alpha1"
	mock "github.com/stretchr/testify/mock"
	"k8s.io/client-go/discovery"
)

// NewInterface creates a new instance of Interface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *Interface {
	mock := &Interface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Interface is an autogenerated mock type for the Interface type
type Interface struct {
	mock.Mock
}

type Interface_Expecter struct {
	mock *mock.Mock
}

func (_m *Interface) EXPECT() *Interface_Expecter {
	return &Interface_Expecter{mock: &_m.Mock}
}

// ArgoprojV1alpha1 provides a mock function for the type Interface
func (_mock *Interface) ArgoprojV1alpha1() v1alpha1.ArgoprojV1alpha1Interface {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for ArgoprojV1alpha1")
	}

	var r0 v1alpha1.ArgoprojV1alpha1Interface
	if returnFunc, ok := ret.Get(0).(func() v1alpha1.ArgoprojV1alpha1Interface); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(v1alpha1.ArgoprojV1alpha1Interface)
		}
	}
	return r0
}

// Interface_ArgoprojV1alpha1_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ArgoprojV1alpha1'
type Interface_ArgoprojV1alpha1_Call struct {
	*mock.Call
}

// ArgoprojV1alpha1 is a helper method to define mock.On call
func (_e *Interface_Expecter) ArgoprojV1alpha1() *Interface_ArgoprojV1alpha1_Call {
	return &Interface_ArgoprojV1alpha1_Call{Call: _e.mock.On("ArgoprojV1alpha1")}
}

func (_c *Interface_ArgoprojV1alpha1_Call) Run(run func()) *Interface_ArgoprojV1alpha1_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Interface_ArgoprojV1alpha1_Call) Return(argoprojV1alpha1Interface v1alpha1.ArgoprojV1alpha1Interface) *Interface_ArgoprojV1alpha1_Call {
	_c.Call.Return(argoprojV1alpha1Interface)
	return _c
}

func (_c *Interface_ArgoprojV1alpha1_Call) RunAndReturn(run func() v1alpha1.ArgoprojV1alpha1Interface) *Interface_ArgoprojV1alpha1_Call {
	_c.Call.Return(run)
	return _c
}

// Discovery provides a mock function for the type Interface
func (_mock *Interface) Discovery() discovery.DiscoveryInterface {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Discovery")
	}

	var r0 discovery.DiscoveryInterface
	if returnFunc, ok := ret.Get(0).(func() discovery.DiscoveryInterface); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(discovery.DiscoveryInterface)
		}
	}
	return r0
}

// Interface_Discovery_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Discovery'
type Interface_Discovery_Call struct {
	*mock.Call
}

// Discovery is a helper method to define mock.On call
func (_e *Interface_Expecter) Discovery() *Interface_Discovery_Call {
	return &Interface_Discovery_Call{Call: _e.mock.On("Discovery")}
}

func (_c *Interface_Discovery_Call) Run(run func()) *Interface_Discovery_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Interface_Discovery_Call) Return(discoveryInterface discovery.DiscoveryInterface) *Interface_Discovery_Call {
	_c.Call.Return(discoveryInterface)
	return _c
}

func (_c *Interface_Discovery_Call) RunAndReturn(run func() discovery.DiscoveryInterface) *Interface_Discovery_Call {
	_c.Call.Return(run)
	return _c
}
