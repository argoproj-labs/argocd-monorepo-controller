// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	"github.com/argoproj/argo-cd/v3/pkg/apis/application/v1alpha1"
	mock "github.com/stretchr/testify/mock"
	"k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/types"
	"k8s.io/apimachinery/pkg/watch"
)

// NewApplicationInterface creates a new instance of ApplicationInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewApplicationInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *ApplicationInterface {
	mock := &ApplicationInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// ApplicationInterface is an autogenerated mock type for the ApplicationInterface type
type ApplicationInterface struct {
	mock.Mock
}

type ApplicationInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *ApplicationInterface) EXPECT() *ApplicationInterface_Expecter {
	return &ApplicationInterface_Expecter{mock: &_m.Mock}
}

// Create provides a mock function for the type ApplicationInterface
func (_mock *ApplicationInterface) Create(ctx context.Context, application *v1alpha1.Application, opts v1.CreateOptions) (*v1alpha1.Application, error) {
	ret := _mock.Called(ctx, application, opts)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *v1alpha1.Application
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *v1alpha1.Application, v1.CreateOptions) (*v1alpha1.Application, error)); ok {
		return returnFunc(ctx, application, opts)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *v1alpha1.Application, v1.CreateOptions) *v1alpha1.Application); ok {
		r0 = returnFunc(ctx, application, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1alpha1.Application)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *v1alpha1.Application, v1.CreateOptions) error); ok {
		r1 = returnFunc(ctx, application, opts)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// ApplicationInterface_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type ApplicationInterface_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - application *v1alpha1.Application
//   - opts v1.CreateOptions
func (_e *ApplicationInterface_Expecter) Create(ctx interface{}, application interface{}, opts interface{}) *ApplicationInterface_Create_Call {
	return &ApplicationInterface_Create_Call{Call: _e.mock.On("Create", ctx, application, opts)}
}

func (_c *ApplicationInterface_Create_Call) Run(run func(ctx context.Context, application *v1alpha1.Application, opts v1.CreateOptions)) *ApplicationInterface_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *v1alpha1.Application
		if args[1] != nil {
			arg1 = args[1].(*v1alpha1.Application)
		}
		var arg2 v1.CreateOptions
		if args[2] != nil {
			arg2 = args[2].(v1.CreateOptions)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *ApplicationInterface_Create_Call) Return(application1 *v1alpha1.Application, err error) *ApplicationInterface_Create_Call {
	_c.Call.Return(application1, err)
	return _c
}

func (_c *ApplicationInterface_Create_Call) RunAndReturn(run func(ctx context.Context, application *v1alpha1.Application, opts v1.CreateOptions) (*v1alpha1.Application, error)) *ApplicationInterface_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function for the type ApplicationInterface
func (_mock *ApplicationInterface) Delete(ctx context.Context, name string, opts v1.DeleteOptions) error {
	ret := _mock.Called(ctx, name, opts)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, v1.DeleteOptions) error); ok {
		r0 = returnFunc(ctx, name, opts)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// ApplicationInterface_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type ApplicationInterface_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
//   - opts v1.DeleteOptions
func (_e *ApplicationInterface_Expecter) Delete(ctx interface{}, name interface{}, opts interface{}) *ApplicationInterface_Delete_Call {
	return &ApplicationInterface_Delete_Call{Call: _e.mock.On("Delete", ctx, name, opts)}
}

func (_c *ApplicationInterface_Delete_Call) Run(run func(ctx context.Context, name string, opts v1.DeleteOptions)) *ApplicationInterface_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 v1.DeleteOptions
		if args[2] != nil {
			arg2 = args[2].(v1.DeleteOptions)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *ApplicationInterface_Delete_Call) Return(err error) *ApplicationInterface_Delete_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *ApplicationInterface_Delete_Call) RunAndReturn(run func(ctx context.Context, name string, opts v1.DeleteOptions) error) *ApplicationInterface_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteCollection provides a mock function for the type ApplicationInterface
func (_mock *ApplicationInterface) DeleteCollection(ctx context.Context, opts v1.DeleteOptions, listOpts v1.ListOptions) error {
	ret := _mock.Called(ctx, opts, listOpts)

	if len(ret) == 0 {
		panic("no return value specified for DeleteCollection")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, v1.DeleteOptions, v1.ListOptions) error); ok {
		r0 = returnFunc(ctx, opts, listOpts)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// ApplicationInterface_DeleteCollection_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteCollection'
type ApplicationInterface_DeleteCollection_Call struct {
	*mock.Call
}

// DeleteCollection is a helper method to define mock.On call
//   - ctx context.Context
//   - opts v1.DeleteOptions
//   - listOpts v1.ListOptions
func (_e *ApplicationInterface_Expecter) DeleteCollection(ctx interface{}, opts interface{}, listOpts interface{}) *ApplicationInterface_DeleteCollection_Call {
	return &ApplicationInterface_DeleteCollection_Call{Call: _e.mock.On("DeleteCollection", ctx, opts, listOpts)}
}

func (_c *ApplicationInterface_DeleteCollection_Call) Run(run func(ctx context.Context, opts v1.DeleteOptions, listOpts v1.ListOptions)) *ApplicationInterface_DeleteCollection_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 v1.DeleteOptions
		if args[1] != nil {
			arg1 = args[1].(v1.DeleteOptions)
		}
		var arg2 v1.ListOptions
		if args[2] != nil {
			arg2 = args[2].(v1.ListOptions)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *ApplicationInterface_DeleteCollection_Call) Return(err error) *ApplicationInterface_DeleteCollection_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *ApplicationInterface_DeleteCollection_Call) RunAndReturn(run func(ctx context.Context, opts v1.DeleteOptions, listOpts v1.ListOptions) error) *ApplicationInterface_DeleteCollection_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function for the type ApplicationInterface
func (_mock *ApplicationInterface) Get(ctx context.Context, name string, opts v1.GetOptions) (*v1alpha1.Application, error) {
	ret := _mock.Called(ctx, name, opts)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *v1alpha1.Application
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, v1.GetOptions) (*v1alpha1.Application, error)); ok {
		return returnFunc(ctx, name, opts)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, v1.GetOptions) *v1alpha1.Application); ok {
		r0 = returnFunc(ctx, name, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1alpha1.Application)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, v1.GetOptions) error); ok {
		r1 = returnFunc(ctx, name, opts)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// ApplicationInterface_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type ApplicationInterface_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
//   - opts v1.GetOptions
func (_e *ApplicationInterface_Expecter) Get(ctx interface{}, name interface{}, opts interface{}) *ApplicationInterface_Get_Call {
	return &ApplicationInterface_Get_Call{Call: _e.mock.On("Get", ctx, name, opts)}
}

func (_c *ApplicationInterface_Get_Call) Run(run func(ctx context.Context, name string, opts v1.GetOptions)) *ApplicationInterface_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 v1.GetOptions
		if args[2] != nil {
			arg2 = args[2].(v1.GetOptions)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *ApplicationInterface_Get_Call) Return(application *v1alpha1.Application, err error) *ApplicationInterface_Get_Call {
	_c.Call.Return(application, err)
	return _c
}

func (_c *ApplicationInterface_Get_Call) RunAndReturn(run func(ctx context.Context, name string, opts v1.GetOptions) (*v1alpha1.Application, error)) *ApplicationInterface_Get_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function for the type ApplicationInterface
func (_mock *ApplicationInterface) List(ctx context.Context, opts v1.ListOptions) (*v1alpha1.ApplicationList, error) {
	ret := _mock.Called(ctx, opts)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 *v1alpha1.ApplicationList
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, v1.ListOptions) (*v1alpha1.ApplicationList, error)); ok {
		return returnFunc(ctx, opts)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, v1.ListOptions) *v1alpha1.ApplicationList); ok {
		r0 = returnFunc(ctx, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1alpha1.ApplicationList)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, v1.ListOptions) error); ok {
		r1 = returnFunc(ctx, opts)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// ApplicationInterface_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type ApplicationInterface_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - ctx context.Context
//   - opts v1.ListOptions
func (_e *ApplicationInterface_Expecter) List(ctx interface{}, opts interface{}) *ApplicationInterface_List_Call {
	return &ApplicationInterface_List_Call{Call: _e.mock.On("List", ctx, opts)}
}

func (_c *ApplicationInterface_List_Call) Run(run func(ctx context.Context, opts v1.ListOptions)) *ApplicationInterface_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 v1.ListOptions
		if args[1] != nil {
			arg1 = args[1].(v1.ListOptions)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *ApplicationInterface_List_Call) Return(applicationList *v1alpha1.ApplicationList, err error) *ApplicationInterface_List_Call {
	_c.Call.Return(applicationList, err)
	return _c
}

func (_c *ApplicationInterface_List_Call) RunAndReturn(run func(ctx context.Context, opts v1.ListOptions) (*v1alpha1.ApplicationList, error)) *ApplicationInterface_List_Call {
	_c.Call.Return(run)
	return _c
}

// Patch provides a mock function for the type ApplicationInterface
func (_mock *ApplicationInterface) Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts v1.PatchOptions, subresources ...string) (*v1alpha1.Application, error) {
	// string
	_va := make([]interface{}, len(subresources))
	for _i := range subresources {
		_va[_i] = subresources[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, name, pt, data, opts)
	_ca = append(_ca, _va...)
	ret := _mock.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Patch")
	}

	var r0 *v1alpha1.Application
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, types.PatchType, []byte, v1.PatchOptions, ...string) (*v1alpha1.Application, error)); ok {
		return returnFunc(ctx, name, pt, data, opts, subresources...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, types.PatchType, []byte, v1.PatchOptions, ...string) *v1alpha1.Application); ok {
		r0 = returnFunc(ctx, name, pt, data, opts, subresources...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1alpha1.Application)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, types.PatchType, []byte, v1.PatchOptions, ...string) error); ok {
		r1 = returnFunc(ctx, name, pt, data, opts, subresources...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// ApplicationInterface_Patch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Patch'
type ApplicationInterface_Patch_Call struct {
	*mock.Call
}

// Patch is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
//   - pt types.PatchType
//   - data []byte
//   - opts v1.PatchOptions
//   - subresources ...string
func (_e *ApplicationInterface_Expecter) Patch(ctx interface{}, name interface{}, pt interface{}, data interface{}, opts interface{}, subresources ...interface{}) *ApplicationInterface_Patch_Call {
	return &ApplicationInterface_Patch_Call{Call: _e.mock.On("Patch",
		append([]interface{}{ctx, name, pt, data, opts}, subresources...)...)}
}

func (_c *ApplicationInterface_Patch_Call) Run(run func(ctx context.Context, name string, pt types.PatchType, data []byte, opts v1.PatchOptions, subresources ...string)) *ApplicationInterface_Patch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 types.PatchType
		if args[2] != nil {
			arg2 = args[2].(types.PatchType)
		}
		var arg3 []byte
		if args[3] != nil {
			arg3 = args[3].([]byte)
		}
		var arg4 v1.PatchOptions
		if args[4] != nil {
			arg4 = args[4].(v1.PatchOptions)
		}
		var arg5 []string
		variadicArgs := make([]string, len(args)-5)
		for i, a := range args[5:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		arg5 = variadicArgs
		run(
			arg0,
			arg1,
			arg2,
			arg3,
			arg4,
			arg5...,
		)
	})
	return _c
}

func (_c *ApplicationInterface_Patch_Call) Return(result *v1alpha1.Application, err error) *ApplicationInterface_Patch_Call {
	_c.Call.Return(result, err)
	return _c
}

func (_c *ApplicationInterface_Patch_Call) RunAndReturn(run func(ctx context.Context, name string, pt types.PatchType, data []byte, opts v1.PatchOptions, subresources ...string) (*v1alpha1.Application, error)) *ApplicationInterface_Patch_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function for the type ApplicationInterface
func (_mock *ApplicationInterface) Update(ctx context.Context, application *v1alpha1.Application, opts v1.UpdateOptions) (*v1alpha1.Application, error) {
	ret := _mock.Called(ctx, application, opts)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 *v1alpha1.Application
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *v1alpha1.Application, v1.UpdateOptions) (*v1alpha1.Application, error)); ok {
		return returnFunc(ctx, application, opts)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *v1alpha1.Application, v1.UpdateOptions) *v1alpha1.Application); ok {
		r0 = returnFunc(ctx, application, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1alpha1.Application)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *v1alpha1.Application, v1.UpdateOptions) error); ok {
		r1 = returnFunc(ctx, application, opts)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// ApplicationInterface_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type ApplicationInterface_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - application *v1alpha1.Application
//   - opts v1.UpdateOptions
func (_e *ApplicationInterface_Expecter) Update(ctx interface{}, application interface{}, opts interface{}) *ApplicationInterface_Update_Call {
	return &ApplicationInterface_Update_Call{Call: _e.mock.On("Update", ctx, application, opts)}
}

func (_c *ApplicationInterface_Update_Call) Run(run func(ctx context.Context, application *v1alpha1.Application, opts v1.UpdateOptions)) *ApplicationInterface_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *v1alpha1.Application
		if args[1] != nil {
			arg1 = args[1].(*v1alpha1.Application)
		}
		var arg2 v1.UpdateOptions
		if args[2] != nil {
			arg2 = args[2].(v1.UpdateOptions)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *ApplicationInterface_Update_Call) Return(application1 *v1alpha1.Application, err error) *ApplicationInterface_Update_Call {
	_c.Call.Return(application1, err)
	return _c
}

func (_c *ApplicationInterface_Update_Call) RunAndReturn(run func(ctx context.Context, application *v1alpha1.Application, opts v1.UpdateOptions) (*v1alpha1.Application, error)) *ApplicationInterface_Update_Call {
	_c.Call.Return(run)
	return _c
}

// Watch provides a mock function for the type ApplicationInterface
func (_mock *ApplicationInterface) Watch(ctx context.Context, opts v1.ListOptions) (watch.Interface, error) {
	ret := _mock.Called(ctx, opts)

	if len(ret) == 0 {
		panic("no return value specified for Watch")
	}

	var r0 watch.Interface
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, v1.ListOptions) (watch.Interface, error)); ok {
		return returnFunc(ctx, opts)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, v1.ListOptions) watch.Interface); ok {
		r0 = returnFunc(ctx, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(watch.Interface)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, v1.ListOptions) error); ok {
		r1 = returnFunc(ctx, opts)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// ApplicationInterface_Watch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Watch'
type ApplicationInterface_Watch_Call struct {
	*mock.Call
}

// Watch is a helper method to define mock.On call
//   - ctx context.Context
//   - opts v1.ListOptions
func (_e *ApplicationInterface_Expecter) Watch(ctx interface{}, opts interface{}) *ApplicationInterface_Watch_Call {
	return &ApplicationInterface_Watch_Call{Call: _e.mock.On("Watch", ctx, opts)}
}

func (_c *ApplicationInterface_Watch_Call) Run(run func(ctx context.Context, opts v1.ListOptions)) *ApplicationInterface_Watch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 v1.ListOptions
		if args[1] != nil {
			arg1 = args[1].(v1.ListOptions)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *ApplicationInterface_Watch_Call) Return(interfaceParam watch.Interface, err error) *ApplicationInterface_Watch_Call {
	_c.Call.Return(interfaceParam, err)
	return _c
}

func (_c *ApplicationInterface_Watch_Call) RunAndReturn(run func(ctx context.Context, opts v1.ListOptions) (watch.Interface, error)) *ApplicationInterface_Watch_Call {
	_c.Call.Return(run)
	return _c
}
