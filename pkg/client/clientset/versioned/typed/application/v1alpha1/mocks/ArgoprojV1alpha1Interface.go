// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"github.com/argoproj/argo-cd/v3/pkg/client/clientset/versioned/typed/application/v1alpha1"
	mock "github.com/stretchr/testify/mock"
	"k8s.io/client-go/rest"
)

// NewArgoprojV1alpha1Interface creates a new instance of ArgoprojV1alpha1Interface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewArgoprojV1alpha1Interface(t interface {
	mock.TestingT
	Cleanup(func())
}) *ArgoprojV1alpha1Interface {
	mock := &ArgoprojV1alpha1Interface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// ArgoprojV1alpha1Interface is an autogenerated mock type for the ArgoprojV1alpha1Interface type
type ArgoprojV1alpha1Interface struct {
	mock.Mock
}

type ArgoprojV1alpha1Interface_Expecter struct {
	mock *mock.Mock
}

func (_m *ArgoprojV1alpha1Interface) EXPECT() *ArgoprojV1alpha1Interface_Expecter {
	return &ArgoprojV1alpha1Interface_Expecter{mock: &_m.Mock}
}

// AppProjects provides a mock function for the type ArgoprojV1alpha1Interface
func (_mock *ArgoprojV1alpha1Interface) AppProjects(namespace string) v1alpha1.AppProjectInterface {
	ret := _mock.Called(namespace)

	if len(ret) == 0 {
		panic("no return value specified for AppProjects")
	}

	var r0 v1alpha1.AppProjectInterface
	if returnFunc, ok := ret.Get(0).(func(string) v1alpha1.AppProjectInterface); ok {
		r0 = returnFunc(namespace)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(v1alpha1.AppProjectInterface)
		}
	}
	return r0
}

// ArgoprojV1alpha1Interface_AppProjects_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AppProjects'
type ArgoprojV1alpha1Interface_AppProjects_Call struct {
	*mock.Call
}

// AppProjects is a helper method to define mock.On call
//   - namespace string
func (_e *ArgoprojV1alpha1Interface_Expecter) AppProjects(namespace interface{}) *ArgoprojV1alpha1Interface_AppProjects_Call {
	return &ArgoprojV1alpha1Interface_AppProjects_Call{Call: _e.mock.On("AppProjects", namespace)}
}

func (_c *ArgoprojV1alpha1Interface_AppProjects_Call) Run(run func(namespace string)) *ArgoprojV1alpha1Interface_AppProjects_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *ArgoprojV1alpha1Interface_AppProjects_Call) Return(appProjectInterface v1alpha1.AppProjectInterface) *ArgoprojV1alpha1Interface_AppProjects_Call {
	_c.Call.Return(appProjectInterface)
	return _c
}

func (_c *ArgoprojV1alpha1Interface_AppProjects_Call) RunAndReturn(run func(namespace string) v1alpha1.AppProjectInterface) *ArgoprojV1alpha1Interface_AppProjects_Call {
	_c.Call.Return(run)
	return _c
}

// ApplicationSets provides a mock function for the type ArgoprojV1alpha1Interface
func (_mock *ArgoprojV1alpha1Interface) ApplicationSets(namespace string) v1alpha1.ApplicationSetInterface {
	ret := _mock.Called(namespace)

	if len(ret) == 0 {
		panic("no return value specified for ApplicationSets")
	}

	var r0 v1alpha1.ApplicationSetInterface
	if returnFunc, ok := ret.Get(0).(func(string) v1alpha1.ApplicationSetInterface); ok {
		r0 = returnFunc(namespace)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(v1alpha1.ApplicationSetInterface)
		}
	}
	return r0
}

// ArgoprojV1alpha1Interface_ApplicationSets_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ApplicationSets'
type ArgoprojV1alpha1Interface_ApplicationSets_Call struct {
	*mock.Call
}

// ApplicationSets is a helper method to define mock.On call
//   - namespace string
func (_e *ArgoprojV1alpha1Interface_Expecter) ApplicationSets(namespace interface{}) *ArgoprojV1alpha1Interface_ApplicationSets_Call {
	return &ArgoprojV1alpha1Interface_ApplicationSets_Call{Call: _e.mock.On("ApplicationSets", namespace)}
}

func (_c *ArgoprojV1alpha1Interface_ApplicationSets_Call) Run(run func(namespace string)) *ArgoprojV1alpha1Interface_ApplicationSets_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *ArgoprojV1alpha1Interface_ApplicationSets_Call) Return(applicationSetInterface v1alpha1.ApplicationSetInterface) *ArgoprojV1alpha1Interface_ApplicationSets_Call {
	_c.Call.Return(applicationSetInterface)
	return _c
}

func (_c *ArgoprojV1alpha1Interface_ApplicationSets_Call) RunAndReturn(run func(namespace string) v1alpha1.ApplicationSetInterface) *ArgoprojV1alpha1Interface_ApplicationSets_Call {
	_c.Call.Return(run)
	return _c
}

// Applications provides a mock function for the type ArgoprojV1alpha1Interface
func (_mock *ArgoprojV1alpha1Interface) Applications(namespace string) v1alpha1.ApplicationInterface {
	ret := _mock.Called(namespace)

	if len(ret) == 0 {
		panic("no return value specified for Applications")
	}

	var r0 v1alpha1.ApplicationInterface
	if returnFunc, ok := ret.Get(0).(func(string) v1alpha1.ApplicationInterface); ok {
		r0 = returnFunc(namespace)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(v1alpha1.ApplicationInterface)
		}
	}
	return r0
}

// ArgoprojV1alpha1Interface_Applications_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Applications'
type ArgoprojV1alpha1Interface_Applications_Call struct {
	*mock.Call
}

// Applications is a helper method to define mock.On call
//   - namespace string
func (_e *ArgoprojV1alpha1Interface_Expecter) Applications(namespace interface{}) *ArgoprojV1alpha1Interface_Applications_Call {
	return &ArgoprojV1alpha1Interface_Applications_Call{Call: _e.mock.On("Applications", namespace)}
}

func (_c *ArgoprojV1alpha1Interface_Applications_Call) Run(run func(namespace string)) *ArgoprojV1alpha1Interface_Applications_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *ArgoprojV1alpha1Interface_Applications_Call) Return(applicationInterface v1alpha1.ApplicationInterface) *ArgoprojV1alpha1Interface_Applications_Call {
	_c.Call.Return(applicationInterface)
	return _c
}

func (_c *ArgoprojV1alpha1Interface_Applications_Call) RunAndReturn(run func(namespace string) v1alpha1.ApplicationInterface) *ArgoprojV1alpha1Interface_Applications_Call {
	_c.Call.Return(run)
	return _c
}

// RESTClient provides a mock function for the type ArgoprojV1alpha1Interface
func (_mock *ArgoprojV1alpha1Interface) RESTClient() rest.Interface {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for RESTClient")
	}

	var r0 rest.Interface
	if returnFunc, ok := ret.Get(0).(func() rest.Interface); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(rest.Interface)
		}
	}
	return r0
}

// ArgoprojV1alpha1Interface_RESTClient_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RESTClient'
type ArgoprojV1alpha1Interface_RESTClient_Call struct {
	*mock.Call
}

// RESTClient is a helper method to define mock.On call
func (_e *ArgoprojV1alpha1Interface_Expecter) RESTClient() *ArgoprojV1alpha1Interface_RESTClient_Call {
	return &ArgoprojV1alpha1Interface_RESTClient_Call{Call: _e.mock.On("RESTClient")}
}

func (_c *ArgoprojV1alpha1Interface_RESTClient_Call) Run(run func()) *ArgoprojV1alpha1Interface_RESTClient_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ArgoprojV1alpha1Interface_RESTClient_Call) Return(interfaceParam rest.Interface) *ArgoprojV1alpha1Interface_RESTClient_Call {
	_c.Call.Return(interfaceParam)
	return _c
}

func (_c *ArgoprojV1alpha1Interface_RESTClient_Call) RunAndReturn(run func() rest.Interface) *ArgoprojV1alpha1Interface_RESTClient_Call {
	_c.Call.Return(run)
	return _c
}
